//Grav Drive toggle power script 
 
static string upperOutputScreen="LCD Panel: Upper Cockpit: Grav Drives";  
static string lowerOutputScreen="LCD Panel: Lower Cockpit: Grav Drives"; 
static string controllerName="Flight Seat: Upper Cockpit";  
static float lowerGravityLimit=-1;  
static float upperGravityLimit=1; 
static string lightsGroup="Cockpit Lights"; 
static string gravDriveGroup="Grav Drive: Borealis"; 
static string reverseDirection="REVERSE"; 
static string reverseMessage="  Grav Drive Direction: " + reverseDirection; 
static string forwardDirection="FORWARD"; 
static string forwardMessage="  Grav Drive Direction: " + forwardDirection; 
static string directionMessageType="DIRECTION"; 
static string powerOn="ON"; 
static string powerOnMessage="  Grav Drive Power: " + powerOn; 
static string powerOff="OFF"; 
static string powerOffMessage="  Grav Drive Power: " + powerOff; 
static string powerMessageType="POWER"; 
static string undetermined="???";  
static string undeterminedDirectionMessage="  Grav Drive Direction: " + undetermined; 
static string undeterminedPowerMessage="  Grav Drive Power: " + undetermined; 
static Color reverseColor=new Color(255,0,0);  //red 
static Color forwardColor=new Color(0,255,0);  //green 
 
public void clearOutputScreen(string screenName){  
	IMyTextPanel screen = GridTerminalSystem.GetBlockWithName(screenName) as IMyTextPanel;  
	screen.WritePublicText("");  
} 
 
public void print(string screenName, string message){  
	IMyTextPanel screen = GridTerminalSystem.GetBlockWithName(screenName) as IMyTextPanel;  
	screen.WritePublicText(message + "\n",true);    
} 
 
public string getNewScreenMessage(string screenName, string messageType, string message){ 
	IMyTextPanel screen = GridTerminalSystem.GetBlockWithName(screenName) as IMyTextPanel;  
	string oldMessage = screen.GetPublicText(); 
 
	if (!oldMessage.Contains("\n")){ 
		oldMessage = undeterminedPowerMessage + "\n" + undeterminedDirectionMessage; 
	} 
 
	string[] splits = oldMessage.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None); 
	int messageToChange = 0; 
	if (messageType == directionMessageType) { 
		messageToChange = 1;  
	}else{ 
		messageToChange = 0; 
	} 
 
	splits[messageToChange] = message; 
	string message1 = ""; 
	string message2 = ""; 
	message1 = splits[0]; 
	message2 = splits[1]; 
		 
	string newMessage = message1 + "\n" + message2; 
	string newScreenMessage = newMessage + "\n\n\n\n\n\n\n\n\n\n" + newMessage;  
	return newScreenMessage; 
} 
 
public bool getCurrentPower(List<IMyTerminalBlock> gravDriveComponents){ 
	bool powered = false; 
	for (int i=0; i < gravDriveComponents.Count; i++){ 
		IMyFunctionalBlock component = gravDriveComponents[i] as IMyFunctionalBlock; 
		powered = component.Enabled; 
		break; 
	} 
	return powered; 
} 
 
public void toggleLights(bool powered){ 
	List<IMyBlockGroup> groups = GridTerminalSystem.BlockGroups; 
	for (int i=0; i < groups.Count; i++){ 
		if (groups[i].Name == lightsGroup){ 
			List<IMyTerminalBlock> lights = groups[i].Blocks; 
			for (int j=0; j < lights.Count; j++){ 
				IMyInteriorLight light = lights[j] as IMyInteriorLight; 
				if (powered){ 
					light.SetValueFloat("Blink Lenght",0); 
					light.SetValueFloat("Blink Interval",0); 
					light.GetActionWithName("OnOff_Off").Apply(light); 
					string newMessage = getNewScreenMessage(upperOutputScreen, powerMessageType, powerOffMessage); 
					clearOutputScreen(upperOutputScreen); 
					clearOutputScreen(lowerOutputScreen); 
					print(upperOutputScreen, newMessage); 
					print(lowerOutputScreen, newMessage); 
				}else{ 
					light.SetValueFloat("Blink Lenght",50); 
					light.SetValueFloat("Blink Interval",(float)1.25); 
					light.GetActionWithName("OnOff_On").Apply(light); 
					string newMessage = getNewScreenMessage(upperOutputScreen, powerMessageType, powerOnMessage); 
					clearOutputScreen(upperOutputScreen); 
					clearOutputScreen(lowerOutputScreen); 
					print(upperOutputScreen, newMessage); 
					print(lowerOutputScreen, newMessage); 
				} 
			} 
		} 
	} 
} 
 
public void toggleGravDrivePower(List<IMyTerminalBlock> gravDriveComponents, bool powered){ 
	for (int i=0; i < gravDriveComponents.Count; i++){ 
		IMyFunctionalBlock component = gravDriveComponents[i] as IMyFunctionalBlock; 
		if (powered){ 
			component.GetActionWithName("OnOff_Off").Apply(component); 
		}else{ 
			component.GetActionWithName("OnOff_On").Apply(component); 
			IMyCockpit controller = GridTerminalSystem.GetBlockWithName(controllerName) as IMyCockpit; 
			//Turn off the dampeners if they are on 
			if (controller.DampenersOverride){ 
				controller.GetActionWithName("DampenersOverride").Apply(controller); 
			} 
		} 
	} 
} 
 
void Main() 
{ 
	//clearOutputScreen(upperOutputScreen); 
	//clearOutputScreen(lowerOutputScreen); 
	List<IMyTerminalBlock> gravDriveComponents = null; 
	List<IMyBlockGroup> groups = GridTerminalSystem.BlockGroups; 
	for (int i=0; i < groups.Count; i++){ 
		if (groups[i].Name == gravDriveGroup){ 
			gravDriveComponents = groups[i].Blocks; 
			break; 
		} 
	} 
	bool powered = getCurrentPower(gravDriveComponents); 
	toggleLights(powered); 
	toggleGravDrivePower(gravDriveComponents, powered);	 
}